# coding: utf-8

"""
    Kubernetes CRD Swagger

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from k8s_gateway_api.models.io_k8s_networking_gateway_v1_grpc_route_spec_rules_inner_backend_refs_inner import IoK8sNetworkingGatewayV1GRPCRouteSpecRulesInnerBackendRefsInner
from k8s_gateway_api.models.io_k8s_networking_gateway_v1_grpc_route_spec_rules_inner_backend_refs_inner_filters_inner import IoK8sNetworkingGatewayV1GRPCRouteSpecRulesInnerBackendRefsInnerFiltersInner
from k8s_gateway_api.models.io_k8s_networking_gateway_v1_grpc_route_spec_rules_inner_matches_inner import IoK8sNetworkingGatewayV1GRPCRouteSpecRulesInnerMatchesInner
from typing import Optional, Set
from typing_extensions import Self

class IoK8sNetworkingGatewayV1GRPCRouteSpecRulesInner(BaseModel):
    """
    GRPCRouteRule defines the semantics for matching a gRPC request based on conditions (matches), processing it (filters), and forwarding the request to an API object (backendRefs).
    """ # noqa: E501
    backend_refs: Optional[Annotated[List[IoK8sNetworkingGatewayV1GRPCRouteSpecRulesInnerBackendRefsInner], Field(max_length=16)]] = Field(default=None, description="BackendRefs defines the backend(s) where matching requests should be sent.  Failure behavior here depends on how many BackendRefs are specified and how many are invalid.  If *all* entries in BackendRefs are invalid, and there are also no filters specified in this route rule, *all* traffic which matches this rule MUST receive an `UNAVAILABLE` status.  See the GRPCBackendRef definition for the rules about what makes a single GRPCBackendRef invalid.  When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive an `UNAVAILABLE` status.  For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status. Implementations may choose how that 50 percent is determined.  Support: Core for Kubernetes Service  Support: Implementation-specific for any other resource  Support for weight: Core", alias="backendRefs")
    filters: Optional[Annotated[List[IoK8sNetworkingGatewayV1GRPCRouteSpecRulesInnerBackendRefsInnerFiltersInner], Field(max_length=16)]] = Field(default=None, description="Filters define the filters that are applied to requests that match this rule.  The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage.  Conformance-levels at this level are defined based on the type of filter:  - ALL core filters MUST be supported by all implementations that support   GRPCRoute. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across   implementations.  Specifying the same filter multiple times is not supported unless explicitly indicated in the filter.  If an implementation can not support a combination of filters, it must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the `Accepted` condition to be set to status `False`, implementations may use the `IncompatibleFilters` reason to specify this configuration error.  Support: Core")
    matches: Optional[Annotated[List[IoK8sNetworkingGatewayV1GRPCRouteSpecRulesInnerMatchesInner], Field(max_length=8)]] = Field(default=None, description="Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied.  For example, take the following matches configuration:  ``` matches: - method:     service: foo.bar   headers:     values:       version: 2 - method:     service: foo.bar.v2 ```  For a request to match against this rule, it MUST satisfy EITHER of the two conditions:  - service of foo.bar AND contains the header `version: 2` - service of foo.bar.v2  See the documentation for GRPCRouteMatch on how to specify multiple match conditions to be ANDed together.  If no matches are specified, the implementation MUST match every gRPC request.  Proxy or Load Balancer routing configuration generated from GRPCRoutes MUST prioritize rules based on the following criteria, continuing on ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes. Precedence MUST be given to the rule with the largest number of:  * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. * Characters in a matching service. * Characters in a matching method. * Header matches.  If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties:  * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by   \"{namespace}/{name}\".  If ties still exist within the Route that has been given precedence, matching precedence MUST be granted to the first matching rule meeting the above criteria.")
    __properties: ClassVar[List[str]] = ["backendRefs", "filters", "matches"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoK8sNetworkingGatewayV1GRPCRouteSpecRulesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in backend_refs (list)
        _items = []
        if self.backend_refs:
            for _item_backend_refs in self.backend_refs:
                if _item_backend_refs:
                    _items.append(_item_backend_refs.to_dict())
            _dict['backendRefs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in matches (list)
        _items = []
        if self.matches:
            for _item_matches in self.matches:
                if _item_matches:
                    _items.append(_item_matches.to_dict())
            _dict['matches'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoK8sNetworkingGatewayV1GRPCRouteSpecRulesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backendRefs": [IoK8sNetworkingGatewayV1GRPCRouteSpecRulesInnerBackendRefsInner.from_dict(_item) for _item in obj["backendRefs"]] if obj.get("backendRefs") is not None else None,
            "filters": [IoK8sNetworkingGatewayV1GRPCRouteSpecRulesInnerBackendRefsInnerFiltersInner.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "matches": [IoK8sNetworkingGatewayV1GRPCRouteSpecRulesInnerMatchesInner.from_dict(_item) for _item in obj["matches"]] if obj.get("matches") is not None else None
        })
        return _obj


