# coding: utf-8

"""
    Kubernetes CRD Swagger

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from k8s_gateway_api.models.io_k8s_networking_gateway_v1_http_route_spec_rules_inner_backend_refs_inner import IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInnerBackendRefsInner
from k8s_gateway_api.models.io_k8s_networking_gateway_v1_http_route_spec_rules_inner_backend_refs_inner_filters_inner import IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInner
from k8s_gateway_api.models.io_k8s_networking_gateway_v1_http_route_spec_rules_inner_matches_inner import IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInnerMatchesInner
from k8s_gateway_api.models.io_k8s_networking_gateway_v1_http_route_spec_rules_inner_timeouts import IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInnerTimeouts
from typing import Optional, Set
from typing_extensions import Self

class IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInner(BaseModel):
    """
    HTTPRouteRule defines semantics for matching an HTTP request based on conditions (matches), processing it (filters), and forwarding the request to an API object (backendRefs).
    """ # noqa: E501
    backend_refs: Optional[Annotated[List[IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInnerBackendRefsInner], Field(max_length=16)]] = Field(default=None, description="BackendRefs defines the backend(s) where matching requests should be sent.  Failure behavior here depends on how many BackendRefs are specified and how many are invalid.  If *all* entries in BackendRefs are invalid, and there are also no filters specified in this route rule, *all* traffic which matches this rule MUST receive a 500 status code.  See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid.  When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code.  For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined.  When a HTTPBackendRef refers to a Service that has no ready endpoints, implementations SHOULD return a 503 for requests to that backend instead. If an implementation chooses to do this, all of the above rules for 500 responses MUST also apply for responses that return a 503.  Support: Core for Kubernetes Service  Support: Extended for Kubernetes ServiceImport  Support: Implementation-specific for any other resource  Support for weight: Core", alias="backendRefs")
    filters: Optional[Annotated[List[IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInner], Field(max_length=16)]] = Field(default=None, description="Filters define the filters that are applied to requests that match this rule.  Wherever possible, implementations SHOULD implement filters in the order they are specified.  Implementations MAY choose to implement this ordering strictly, rejecting any combination or order of filters that can not be supported. If implementations choose a strict interpretation of filter ordering, they MUST clearly document that behavior.  To reject an invalid combination or order of filters, implementations SHOULD consider the Route Rules with this configuration invalid. If all Route Rules in a Route are invalid, the entire Route would be considered invalid. If only a portion of Route Rules are invalid, implementations MUST set the \"PartiallyInvalid\" condition for the Route.  Conformance-levels at this level are defined based on the type of filter:  - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across   implementations.  Specifying the same filter multiple times is not supported unless explicitly indicated in the filter.  All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the `Accepted` condition to be set to status `False`, implementations may use the `IncompatibleFilters` reason to specify this configuration error.  Support: Core")
    matches: Optional[Annotated[List[IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInnerMatchesInner], Field(max_length=64)]] = Field(default=None, description="Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied.  For example, take the following matches configuration:  ``` matches: - path:     value: \"/foo\"   headers:   - name: \"version\"     value: \"v2\" - path:     value: \"/v2/foo\" ```  For a request to match against this rule, a request must satisfy EITHER of the two conditions:  - path prefixed with `/foo` AND contains the header `version: v2` - path prefix of `/v2/foo`  See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together.  If no matches are specified, the default is a prefix path match on \"/\", which has the effect of matching every HTTP request.  Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having:  * \"Exact\" path match. * \"Prefix\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches.  Note: The precedence of RegularExpression path matches are implementation-specific.  If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties:  * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by   \"{namespace}/{name}\".  If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria.  When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.")
    timeouts: Optional[IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInnerTimeouts] = None
    __properties: ClassVar[List[str]] = ["backendRefs", "filters", "matches", "timeouts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in backend_refs (list)
        _items = []
        if self.backend_refs:
            for _item_backend_refs in self.backend_refs:
                if _item_backend_refs:
                    _items.append(_item_backend_refs.to_dict())
            _dict['backendRefs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in matches (list)
        _items = []
        if self.matches:
            for _item_matches in self.matches:
                if _item_matches:
                    _items.append(_item_matches.to_dict())
            _dict['matches'] = _items
        # override the default output from pydantic by calling `to_dict()` of timeouts
        if self.timeouts:
            _dict['timeouts'] = self.timeouts.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backendRefs": [IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInnerBackendRefsInner.from_dict(_item) for _item in obj["backendRefs"]] if obj.get("backendRefs") is not None else None,
            "filters": [IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInner.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "matches": [IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInnerMatchesInner.from_dict(_item) for _item in obj["matches"]] if obj.get("matches") is not None else None,
            "timeouts": IoK8sNetworkingGatewayV1HTTPRouteSpecRulesInnerTimeouts.from_dict(obj["timeouts"]) if obj.get("timeouts") is not None else None
        })
        return _obj


