# coding: utf-8

"""
    Kubernetes CRD Swagger

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from k8s_gateway_api.models.io_k8s_networking_gateway_v1_gateway_spec_listeners_inner_allowed_routes_kinds_inner import IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutesKindsInner
from k8s_gateway_api.models.io_k8s_networking_gateway_v1_gateway_spec_listeners_inner_allowed_routes_namespaces import IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutesNamespaces
from typing import Optional, Set
from typing_extensions import Self

class IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutes(BaseModel):
    """
    AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present.  Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria:  * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with   a creation timestamp of \"2020-09-08 01:02:03\" is given precedence over   a Route with a creation timestamp of \"2020-09-08 01:02:04\". * If everything else is equivalent, the Route appearing first in   alphabetical order (namespace/name) should be given precedence. For   example, foo/bar is given precedence over foo/baz.  All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported.  Support: Core
    """ # noqa: E501
    kinds: Optional[Annotated[List[IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutesKindsInner], Field(max_length=8)]] = Field(default=None, description="Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol.  A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \"ResolvedRefs\" condition to False for this Listener with the \"InvalidRouteKinds\" reason.  Support: Core")
    namespaces: Optional[IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutesNamespaces] = None
    __properties: ClassVar[List[str]] = ["kinds", "namespaces"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in kinds (list)
        _items = []
        if self.kinds:
            for _item_kinds in self.kinds:
                if _item_kinds:
                    _items.append(_item_kinds.to_dict())
            _dict['kinds'] = _items
        # override the default output from pydantic by calling `to_dict()` of namespaces
        if self.namespaces:
            _dict['namespaces'] = self.namespaces.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "kinds": [IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutesKindsInner.from_dict(_item) for _item in obj["kinds"]] if obj.get("kinds") is not None else None,
            "namespaces": IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutesNamespaces.from_dict(obj["namespaces"]) if obj.get("namespaces") is not None else None
        })
        return _obj


