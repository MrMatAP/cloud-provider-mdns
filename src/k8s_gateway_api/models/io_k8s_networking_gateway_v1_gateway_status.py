# coding: utf-8

"""
    Kubernetes CRD Swagger

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from k8s_gateway_api.models.io_k8s_networking_gateway_v1_gateway_status_addresses_inner import IoK8sNetworkingGatewayV1GatewayStatusAddressesInner
from k8s_gateway_api.models.io_k8s_networking_gateway_v1_gateway_status_listeners_inner import IoK8sNetworkingGatewayV1GatewayStatusListenersInner
from k8s_gateway_api.models.io_k8s_networking_gateway_v1_grpc_route_status_parents_inner_conditions_inner import IoK8sNetworkingGatewayV1GRPCRouteStatusParentsInnerConditionsInner
from typing import Optional, Set
from typing_extensions import Self

class IoK8sNetworkingGatewayV1GatewayStatus(BaseModel):
    """
    Status defines the current state of Gateway.
    """ # noqa: E501
    addresses: Optional[Annotated[List[IoK8sNetworkingGatewayV1GatewayStatusAddressesInner], Field(max_length=16)]] = Field(default=None, description="Addresses lists the network addresses that have been bound to the Gateway.  This list may differ from the addresses provided in the spec under some conditions:    * no addresses are specified, all addresses are dynamically assigned   * a combination of specified and dynamic addresses are assigned   * a specified address was unusable (e.g. already in use)  ")
    conditions: Optional[Annotated[List[IoK8sNetworkingGatewayV1GRPCRouteStatusParentsInnerConditionsInner], Field(max_length=8)]] = Field(default=None, description="Conditions describe the current conditions of the Gateway.  Implementations should prefer to express Gateway conditions using the `GatewayConditionType` and `GatewayConditionReason` constants so that operators and tools can converge on a common vocabulary to describe Gateway state.  Known condition types are:  * \"Accepted\" * \"Programmed\" * \"Ready\"")
    listeners: Optional[Annotated[List[IoK8sNetworkingGatewayV1GatewayStatusListenersInner], Field(max_length=64)]] = Field(default=None, description="Listeners provide status for each unique listener port defined in the Spec.")
    __properties: ClassVar[List[str]] = ["addresses", "conditions", "listeners"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoK8sNetworkingGatewayV1GatewayStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item_addresses in self.addresses:
                if _item_addresses:
                    _items.append(_item_addresses.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in listeners (list)
        _items = []
        if self.listeners:
            for _item_listeners in self.listeners:
                if _item_listeners:
                    _items.append(_item_listeners.to_dict())
            _dict['listeners'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoK8sNetworkingGatewayV1GatewayStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addresses": [IoK8sNetworkingGatewayV1GatewayStatusAddressesInner.from_dict(_item) for _item in obj["addresses"]] if obj.get("addresses") is not None else None,
            "conditions": [IoK8sNetworkingGatewayV1GRPCRouteStatusParentsInnerConditionsInner.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "listeners": [IoK8sNetworkingGatewayV1GatewayStatusListenersInner.from_dict(_item) for _item in obj["listeners"]] if obj.get("listeners") is not None else None
        })
        return _obj


