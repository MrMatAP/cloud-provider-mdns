# coding: utf-8

"""
    Kubernetes CRD Swagger

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from k8s_gateway_api.models.io_k8s_networking_gateway_v1_gateway_spec_infrastructure_parameters_ref import IoK8sNetworkingGatewayV1GatewaySpecInfrastructureParametersRef
from typing import Optional, Set
from typing_extensions import Self

class IoK8sNetworkingGatewayV1GatewaySpecInfrastructure(BaseModel):
    """
    Infrastructure defines infrastructure level attributes about this Gateway instance.  Support: Extended
    """ # noqa: E501
    annotations: Optional[Dict[str, Annotated[str, Field(min_length=0, strict=True, max_length=4096)]]] = Field(default=None, description="Annotations that SHOULD be applied to any resources created in response to this Gateway.  For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources. For other implementations, this refers to any relevant (implementation specific) \"annotations\" concepts.  An implementation may chose to add additional implementation-specific annotations as they see fit.  Support: Extended")
    labels: Optional[Dict[str, Annotated[str, Field(min_length=0, strict=True, max_length=63)]]] = Field(default=None, description="Labels that SHOULD be applied to any resources created in response to this Gateway.  For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources. For other implementations, this refers to any relevant (implementation specific) \"labels\" concepts.  An implementation may chose to add additional implementation-specific labels as they see fit.  If an implementation maps these labels to Pods, or any other resource that would need to be recreated when labels change, it SHOULD clearly warn about this behavior in documentation.  Support: Extended")
    parameters_ref: Optional[IoK8sNetworkingGatewayV1GatewaySpecInfrastructureParametersRef] = Field(default=None, alias="parametersRef")
    __properties: ClassVar[List[str]] = ["annotations", "labels", "parametersRef"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoK8sNetworkingGatewayV1GatewaySpecInfrastructure from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parameters_ref
        if self.parameters_ref:
            _dict['parametersRef'] = self.parameters_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoK8sNetworkingGatewayV1GatewaySpecInfrastructure from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "labels": obj.get("labels"),
            "parametersRef": IoK8sNetworkingGatewayV1GatewaySpecInfrastructureParametersRef.from_dict(obj["parametersRef"]) if obj.get("parametersRef") is not None else None
        })
        return _obj


