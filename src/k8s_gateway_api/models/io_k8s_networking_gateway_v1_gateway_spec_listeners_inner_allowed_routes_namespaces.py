# coding: utf-8

"""
    Kubernetes CRD Swagger

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from k8s_gateway_api.models.io_k8s_networking_gateway_v1_gateway_spec_listeners_inner_allowed_routes_namespaces_selector import IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutesNamespacesSelector
from typing import Optional, Set
from typing_extensions import Self

class IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutesNamespaces(BaseModel):
    """
    Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default.  Support: Core
    """ # noqa: E501
    var_from: Optional[StrictStr] = Field(default='Same', description="From indicates where Routes will be selected for this Gateway. Possible values are:  * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by   this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway.  Support: Core", alias="from")
    selector: Optional[IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutesNamespacesSelector] = None
    __properties: ClassVar[List[str]] = ["from", "selector"]

    @field_validator('var_from')
    def var_from_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['All', 'Selector', 'Same']):
            raise ValueError("must be one of enum values ('All', 'Selector', 'Same')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutesNamespaces from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of selector
        if self.selector:
            _dict['selector'] = self.selector.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutesNamespaces from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "from": obj.get("from") if obj.get("from") is not None else 'Same',
            "selector": IoK8sNetworkingGatewayV1GatewaySpecListenersInnerAllowedRoutesNamespacesSelector.from_dict(obj["selector"]) if obj.get("selector") is not None else None
        })
        return _obj


